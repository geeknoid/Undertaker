{
  "Assemblies": [
    {
      "Assembly": "TestLibrary",
      "Types": [
        {
          "Symbol": "TestLibrary.AliveClass",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.AliveNestedType",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.DeadNestedType",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveDelegate",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveEnum",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveStruct",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadClass",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadDelegate",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadEnum",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadStruct",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.GenericTypeArgument",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.MyException",
          "Dependents": [],
          "Root": false
        }
      ],
      "Members": [
        {
          "Symbol": "TestLibrary.AliveClass..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.AliveField",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.AliveMethod()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.AliveNestedType..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers._value",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.get_AliveComplexProperty()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.get_AliveSimpleProperty()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.set_AliveComplexProperty(Int32)",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassAndAliveMembers.set_AliveSimpleProperty(Int32)",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.DeadField",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.DeadMethod()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.DeadNestedType..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers._value",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.get_DeadComplexProperty()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.get_DeadSimpleProperty()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.set_DeadComplexProperty(Int32)",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveClassButDeadMembers.set_DeadSimpleProperty(Int32)",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveDelegate..ctor(Object, nint)",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveDelegate.Invoke()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.AliveStruct..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadClass..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadDelegate..ctor(Object, nint)",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadDelegate.Invoke()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.DeadStruct..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.GenericTypeArgument..ctor()",
          "Dependents": [],
          "Root": false
        },
        {
          "Symbol": "TestLibrary.MyException..ctor()",
          "Dependents": [],
          "Root": false
        }
      ]
    }
  ]
}